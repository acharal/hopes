# Pipeline of Interpreter

* parser
-- monad:  Monad m => ParserT m
-- input:  list of tokens
-- output: either errors or Language.Hopl.Syntax of StringSymbols

* typecheck
-- monad:  (Monad m, MonadIO m) => Tc m
-- input:  Languge.Hopl.Syntax of StringSymbols
-- output: Errors,Warnings and Type Environment

* wellform/zonking:
  calls typechecker and check other limitations
-- monad:  (Monad m, MonadIO m) => Tc m
-- input:  Language.Hopl.Syntax of StringSymbols and TypeEnv
-- output: Language.Hopl.Syntax of StringSymbols and ZonkedTypeEnv

* desugar
-- monad:  Monad m => DesugarT m 
-- input:  Language.Hopl.Syntax of StringSymbols and ZonkedTypeEnv
-- output: Language.Hopl of TypedSymbols (and without location info) and ZonkedTypeEnv

* corelang
-- input:  Language.Hopl of TypedSymbols
-- output: CoreLang of TypedSymbols

* prover
-- monad: Monad m => InferT m
-- input: corelang program and corelang goal
-- output: list of computedanswers


# Abstract Syntax Trees

-- Language.Hopl.Syntax 
-- Language.Hopl
-- CoreLang
