Cabal-Version:  >= 1.6
Build-Type:	Simple
Name:           hopes
Version:        0.0.5
License:        GPL
License-File:   LICENSE
Author:         Angelos Charalambidis <a.charalambidis@di.uoa.gr>
Maintainer:     Angelos Charalambidis <a.charalambidis@di.uoa.gr>
Copyright:	2006-2011 Angelos Charalambidis
Stability:      Experimental
Synopsis:       Higher Order Prolog with Extensional Semantics
Description:
	Hopes is a prototype interpreter for a subset of Higher Order Logic
	used as Programming Language.
Category:       Compilers/Interpreters
Tested-With:	GHC==6.8.2
Extra-Source-Files:
                pl/examples/*.pl
                Makefile
		README
                AUTHORS
                COPYING
Bug-Reports:	https://github.com/acharal/hopes/issues
Homepage:	https://github.com/acharal/hopes

Source-Repository head
  type:		git
  location:	https://github.com/acharal/hopes.git

Flag split-base
  Description:    Choose the new, split-up base package.

Flag dc-impl
  Description:    Choose the alternative implementation of prover using delimited continuations
  Default: False

Executable      hopes
  Main-Is:	  Main.hs
  Build-Depends:  mtl==2.2.0.1, transformers==0.4.2.0, haskeline, monad-coroutine
  if flag(split-base)
    Build-Depends: base >= 3.0 && < 5, array, pretty
  else
    Build-Depends: haskell98, base < 3.0

  if flag(dc-impl)
    Build-Depends: CC-delcont-cxe
    CPP-Options: -DDCIMPL

  if os(windows)
    CPP-Options: -DBUILD_WINDOWS

  Hs-Source-Dirs: src
                  src/basic
                  src/frontend
                  src/prover
                  src/interpreter
  Other-Modules:  Lexer, Parser, ParseUtils, Language.Hopl.Syntax, Language.Hopl.Parser,
                  Lang, Types,
                  Tc, WellForm, TypeCheck, Restrict,
                  Pretty, Error, Loc, Desugar,
                  Language.Hopl, Logic, Logic.Class, Infer, Subst, 
                  CoreLang,
                  Shell, Driver
  Extensions:     RankNTypes
                  MultiParamTypeClasses
                  FlexibleInstances
                  TypeSynonymInstances
                  FlexibleContexts
                  FunctionalDependencies
                  CPP
                  UndecidableInstances
                  NoMonomorphismRestriction

